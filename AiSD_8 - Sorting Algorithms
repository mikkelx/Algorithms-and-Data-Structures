#include <cstdlib>
#include <iostream>
#include <ctime>

using namespace std;


//Zadanie 1

void print(int* S, int n);              //wyświetla dane
void init(int* S, int n);               //generuje losowe dane
void copy(int* S, int* C, int n);       //kopiowanie tablic

void insertionSort(int* S, int n);
void selectionSort(int* S, int n);
void bubbleSort(int* S, int n);

//Zadanie 3
void quickSort(int* S, int left, int right);
int split(int* S, int left, int right);


int main()
{
	srand(time(0));
	clock_t start;
	clock_t end;
	double sredni_czas_InsertionS = 0;
	double sredni_czas_SelectionS = 0;
	double sredni_czas_BubbleS = 0;
	double sredni_czas_QuickS = 0;
	int proby = 3;
	for (int i = 0; i < proby; i++)
	{

		int n = 50000;                //przykładowy rozmiar
		int* S = new int[n];
		int* C = new int[n];
		//generacja i wyświetlenie danych
		init(S, n);
		//kopiowanie S do C
		copy(C, S, n);
		//print(S, n);
		//sortowanie i wyświetlenie danych

		//wstawianie
		cout << "Sortowanie przez wstawianie: \n";
		start = clock();
		insertionSort(S, n);
		end = clock();
		double result_time_InsertionS = (double)(end - start) / CLOCKS_PER_SEC;
		sredni_czas_InsertionS += result_time_InsertionS;
		//print(S, n);
		//cout << endl;

		copy(S, C, n);
		//selectionsort
		//print(S, n);
		cout << "Sortowanie przez wybieranie: \n";
		start = clock();
		selectionSort(S, n);
		end = clock();
		double result_time_SelectionS = (double)(end - start) / CLOCKS_PER_SEC;
		sredni_czas_SelectionS += result_time_SelectionS;
		//print(S, n);
		//cout << endl;

		copy(S, C, n);
		//BubbleSort
		//print(S, n);
		cout << "Sortowanie przez zamiane(BubbleSort): \n";
		start = clock();
		bubbleSort(S, n);
		end = clock();
		double result_time_BubbleS = (double)(end - start) / CLOCKS_PER_SEC;
		sredni_czas_BubbleS += result_time_BubbleS;
		//print(S, n);

		copy(S, C, n);
		//QuickSort
		//print(S, n);
		cout << "Sortowanie szybkie(QuickSort): \n";
		start = clock();
		quickSort(S, 0, n-1);
		end = clock();
		double result_time_QuickS = (double)(end - start) / CLOCKS_PER_SEC;
		sredni_czas_QuickS += result_time_QuickS;
		//print(S, n);
	}

	cout << "\n\nSrednie czasy dla poszczegolnych algorytmow (" << proby<<" pomiarow): \n";
	cout << "Sortowanie przez wstawianie - " << sredni_czas_InsertionS/proby << endl;
	cout << "Sortowanie przez wybieranie - " << sredni_czas_SelectionS/proby << endl;
	cout << "Sortowanie przez zamiane - " << sredni_czas_BubbleS/proby << endl;
	cout << "Sortowanie szybkie - " << sredni_czas_QuickS/proby << endl;


	return 0;
}


void quickSort(int* S, int left, int right)
{
	if (left < right)
	{
		int pivotindex = split(S, left, right);
		quickSort(S, left, pivotindex - 1);
		quickSort(S, pivotindex + 1, right);
	}
}

int split(int* S, int left, int right)
{
	int i = left - 1;
	int pivot = S[right];

	for (int j = left; j <= right - 1; j++)
	{
		if (S[j] < pivot)
		{
			i++;
			swap(S[i], S[j]);
		}
	}
	swap(S[i + 1], S[right]);

	return (i + 1);
}

void bubbleSort(int* S, int n)
{
	for (int i = 1; i < n; i++)
	{
		for (int j = n - 1; j >= 0; j--)
		{
			if (S[j] < S[j - 1])
				swap(S[j], S[j - 1]);
		}
	}
}

void selectionSort(int* S, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		int min = i;
		for (int j = i + 1; j < n; j++)
		{
			if (S[j] < S[min])
				min = j;
		}
		swap(S[i], S[min]);
	}
}

void insertionSort(int* S, int n)
{
	for (int i = 1; i < n; i++)
	{
		int temp = S[i];
		int j;
		for (j = i - 1; j >= 0; j--)
		{
			if (S[j] > temp)
			{
				int tmp = S[j + 1];
				S[j + 1] = S[j];
				S[j] = tmp;
			}
			else break;
		}
		S[j + 1] = temp;
	}
}

void print(int* S, int n)
{
	cout << "[ ";
	for (int i = 0; i < n; i++)
	{
		cout << S[i] << " ";
	}
	cout << "]\n";
}

void init(int* S, int n)
{
	for (int i = 0; i < n; i++)
	{
		S[i] = rand() % 20;
	}
}


void copy(int* S, int* C, int n)
{
	for (int i = 0; i < n; i++)
	{
		S[i] = C[i];
	}
}
