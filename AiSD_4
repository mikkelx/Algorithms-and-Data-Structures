#include <iostream>

using namespace std;


//Zadanie 1
class Element {
private:
    int v;
    Element* next;
    Element* prev;

public:
    Element();                                        //tworzy pusty element
    Element(int x, Element* next, Element* prev);    //tworzy element przechowujący x
    int getValue();                                    //zwraca wartość
    void setValue(int v);                            //ustawia warość v
    Element* getNext();                                //zwraca ozycję następnego elementu
    Element* getPrev();                                //zwraca pozycję poprzedniego elementu
    void setNext(Element* p);                        //ustawia p jako następny element
    void setPrev(Element* p);                        //ustawia p jako poprzedni element
};

class LinkedList {
private:
    Element* head;                    //pozycja pierwszego elementu
    Element* tail;                    //pozycja ostatniego elementu
    int size;

public:
    LinkedList();                                //tworzy pustą listę
    bool empty();                                //zwraca prawdę jeśli lista pusta, fałsz w przeciwnym przypadku
    int getSize();                                //zwraca wielkość listy (liczbę elementów w liście)
    Element* getFirst();                         //zwraca pozycję (wskaźnik do) pierwszego elementu listy
    Element* getLast();                               //zwraca pozycję (wskaźnik do) ostatniego elementu listy
    Element* getNext(Element* p);               //zwraca pozycję (wskaźnik do) następniego elementu listy
    Element* getPrev(Element* p);              //zwraca pozycję (wskaźnik do) poprzedniego elementu listy
    int retrive(Element* p);                   //zwraca element (wartość) z pozycji (wskazywanej przez) p
    Element* locate(int x);                         //zwrac pozycję pierwszego wystąpienia elementu x, NULL jeśli x nie występuje
    void append(int x);                            //wstawia element z x na końcu listy
    void preppend(int x);                            //wstawia element z x na początku listy
    void insert(Element* p, int x);              //wstawia element z wartością x na pozycję (wskazywaną przez) p       
    void del(Element* p);                            //usuwa element z pozycji (wskazywaniej przez) p       
    void clear();                                   //usuwa całą listę
    friend ostream& operator<<(ostream& out, LinkedList* l); //wypisuje elementu listy           
    void insert(int p, int x);            //wstawia element z x na pozycję (integer) p (licząc od 0)
    void del(int p);                    //usuwa element z pozycji (integer) p (licząc od 0)
    ~LinkedList();
};

//Zadanie 2
class SortedLinkedList:public LinkedList 
{
public:
    //konstruktor, destruktor
    void insertSorted(int x);
    SortedLinkedList() : LinkedList() {};
    ~SortedLinkedList() { this->clear(); };
};



int main()
{
    //zadanie 1
    LinkedList* a = new LinkedList();
    cout << endl << "empty(): 1 - " << a->empty();
    cout << endl << "getSize():  0 - " << a->getSize();
    cout << endl << "append(4): 4 - "; a->append(4);
    cout << " " << a;
    cout << endl << "append(5): [4,5] - "; a->append(5);
    cout << " " << a;
    cout << endl << "getSize():  2 - " << a->getSize();
    cout << endl << "preppend(6): [6 4 5] - "; a->preppend(6);
    cout << " " << a;
    cout << endl << "getSize():  3 - " << a->getSize();
    cout << endl << "retrieve(getFirst()): 6 - " << a->retrive(a->getFirst());
    cout << endl << "insert(tail, 3): [6 4 3 5] - ";
    a->insert(a->getLast(), 3);
    cout << " " << a;
    cout << endl << "insert(2, 7): [6 4 7 3 5] - ";
    a->insert(2, 7);
    cout << " " << a;
    cout << endl << "insert(4, 8): [6 4 7 3 8 5] - ";
    a->insert(4, 8);
    cout << " " << a;
    cout << endl << "insert(0, 8): [8 6 4 7 3 8 5] - ";
    a->insert(0, 8);
    cout << " " << a;
    cout << endl << "del(tail): [8 6 4 7 3 8] - ";
    a->del(a->getLast()); cout << " " << a;
    cout << endl << "del(1): [8 4 7 3 8] - ";
    a->del(1); cout << " " << a;
    cout << endl << "del(head): [4 7 3 8] - ";
    a->del(a->getFirst()); cout << " " << a;
    cout << endl << "del(0): [7 3 8] - "; a->del(0); cout << " " << a;
    cout << endl << "clear() - "; a->clear(); cout << " " << a;

    //Zadanie 2 test
    cout << endl << endl;
    SortedLinkedList* b = new SortedLinkedList();
    cout << endl << "empty(): 1 - " << b->empty();
    cout << endl << "getSize():  0 - " << b->getSize();
    cout << endl << "insertSorted(4): 4 - "; b->insertSorted(4);
    cout << " " << b;
    cout << endl << "insertSorted(2): 2 4 - "; b->insertSorted(2);
    cout << " " << b;
    cout << endl << "insertSorted(3): 2 3 4 - "; b->insertSorted(3);
    cout << " " << b;
    cout << endl << "insertSorted(1): 1 2 3 4 - "; b->insertSorted(1);
    cout << " " << b;


    return 0;
}

Element::Element() {
    v = 0;
    next = nullptr;
    prev = nullptr;
}

Element::Element(int x, Element* next, Element* prev) : v(x), next(next), prev(prev) {};

int Element::getValue() {
    return v;
}

void Element::setValue(int v) {
    this->v = v;
}

Element* Element::getNext() {
    return this->next;
}

Element* Element::getPrev() {
    return this->prev;
}

void Element::setNext(Element* p) {
    next = p;
}

void Element::setPrev(Element* p) {
    prev = p;
}

LinkedList::LinkedList() {
    size = 0;
    head = new Element;
    tail = head;
}

//LinkedList::LinkedList() :head(nullptr), tail(nullptr), size(0) {};

bool LinkedList::empty() {
    if (size == 0)
        return true;
    return false;
}

int LinkedList::getSize() {
    return size;
}

Element* LinkedList::getFirst() {
    return head;
}

Element* LinkedList::getLast() {
    return tail;
}

Element* LinkedList::getNext(Element* p) {
    return p->getNext();
}

Element* LinkedList::getPrev(Element* p) {
    return p->getPrev();
}

int LinkedList::retrive(Element* p) {
    return p->getValue();
}

void LinkedList::append(int x) {
    Element* newone = new Element;
    newone->setValue(x);
    if (size == 0)
    {
        head = newone;
        tail = newone;
        size++;
    }
    else {
        newone->setPrev(tail);
        tail->setNext(newone);
        tail = newone;
        size++;
    }
}

void LinkedList::preppend(int x) {
    Element* newone = new Element;
    newone->setValue(x);
    if (size == 0)
    {
        head = newone;
        tail = newone;
    }
    else {
        newone->setNext(head);
        head->setPrev(newone);
        head = newone;
    }
    size++;
}

void LinkedList::insert(Element* p, int x) {
    if (p == this->getFirst())
    {
        preppend(x);
        return;
    }
    Element* temp = p;
    int counter = 0;
    //znalezienie wskaznika p w liscie
    while (temp != p)
    {
        counter++;
        temp = temp->getNext();

        if (counter > size)
            return;
    }
    //przypisanie x do isniejacego w liscie wskaznika 
    Element* newone = new Element;
    newone->setValue(temp->getValue());
    temp->setValue(x);
    //utworzenie nowego el listy zaraz za wskaznikiem p
    newone->setPrev(temp);
    newone->setNext(temp->getNext());
    temp->setNext(newone);
    tail = newone;
    size++;
}

void LinkedList::insert(int p, int x) {
    if (p == 0)
    {
        preppend(x);
        return;
    }
    int counter = 0;
    Element* temp = this->getFirst();
    //znalezienie wskaznika p w liscie
    while (counter != p)
    {
        temp = temp->getNext();
        counter++;
    }


    Element* newone = new Element;
    newone->setValue(x);
    newone->setPrev(temp->getPrev());
    newone->setNext(temp);
    //przestawienie wsk poprzedniego el na newone
    newone->getPrev()->setNext(newone);
    temp->setPrev(newone);
    size++;
}

Element* LinkedList::locate(int x) {
    Element* temp = this->getFirst();
    while (temp != nullptr)
    {
        if (temp->getValue() == x)
        {
            return temp;
        }
        temp = temp->getNext();
    }
    return nullptr;
}

void LinkedList::del(Element* p)
{
    Element* temp = this->getFirst();
    int counter = 0;

    //sprawdzenie czy wskaznik jest na liscie
    while (temp != p)
    {
        counter++;
        if (counter > size)
            return;
        temp = temp->getNext();
    }

    if (p == tail)
    {
        tail = p->getPrev();
        tail->setNext(nullptr);
    }
    else if (p == head)
    {
        head = p->getNext();
        head->setPrev(nullptr);
    }
    else {
        Element* t1, * t2;
        t1 = p->getPrev();
        t2 = p->getNext();
        //zmiana 
        t1->setNext(t2);
        t2->setPrev(t1);
    }

    ////ustawianie next p-1 elementu na p->next
    //temp->getPrev()->setNext(temp->getNext());
    ////ustawianie prev p+1 elementu na p->prev 
    //temp->getNext()->setPrev(temp->getPrev());
    size--;
    delete p;
}

void LinkedList::del(int p) {
    Element* temp = this->getFirst();
    int counter = 0;

    //znalezienie odpowiedniej pozycji
    while (counter != p)
    {
        if (counter > size)
            return;
        temp = temp->getNext();
        counter++;
    }

    if (temp == tail)
    {
        tail = temp->getPrev();
        tail->setNext(nullptr);
        
    }
    else if (temp == head)
    {
        head = temp->getNext();
        head->setPrev(nullptr);
        cout << "delete";
    }
    else {
        Element* t1, * t2;
        t1 = temp->getPrev();
        t2 = temp->getNext();
        //zmiana 
        t1->setNext(t2);
        t2->setPrev(t1);
    }

    size--;
    delete temp;
}

void LinkedList::clear() {
    Element* toDelete = this->getFirst();
    Element* nextOne = toDelete->getNext();

    while (nextOne != nullptr)
    {
        delete toDelete;
        toDelete = nextOne;
        nextOne = nextOne->getNext();
    }

    size = 0;
    head = nullptr;
    tail = nullptr;
}

ostream& operator<<(ostream& out, LinkedList* l) {
    Element* temp = l->getFirst();
    out << "[";
    while (temp != nullptr)
    {
        out << " " << temp->getValue();
        temp = temp->getNext();
    }
    out << " ]";
    return out;
}

LinkedList::~LinkedList() {
    this->clear();
}

void SortedLinkedList::insertSorted(int x) {
    int s = getSize();
    Element* temp = this->getFirst();
    bool found = false;

    //znalezienie wskaznika na odpowiedniej pozycji
    int position = 0;
    if (s > 0)
    {
        for (int i = 0; i < s; i++)
        {
            if (x <= retrive(temp))
            {
                found = true;
                position = i;
                break;
            }
            temp = temp->getNext();
        }
    }

    ////wstawianie na pierwsza lub jedyna pozycje
    //if (s == 0 || position == 0) {
    //    preppend(x);
    //    return;
    //}

    //wstawianie na ostatnia pozycje
    if (!found)
    {
        append(x);
        return;
    }
    else
        insert(position, x);
}
