//Zięba Michał
#include <iostream>
#include <algorithm>


using namespace std;


//Zadanie 1
class MinHeap {
private:
    int* kopiec;
    int capacity;
    int size;
public:
    MinHeap(int c);            //tworzy pusty kopiec o pojemności c
    MinHeap();                //konstruktor do testów kopca - należy utworzyć kopiec z następującą zawartością: 1, 2, 4, 6, 5, 4, 7, 7, 7, 9, 6
    bool empty();
    bool full();
    int getLeft(int i);                    //zwraca pozycję lewego syna
    int getRight(int i);                //zwraca pozycję prawego syna
    int getParent(int i);                //zwraca pozycję ojca
    int getSize();                        //zwraca rozmiar kopca
    void setSize(int s);                //ustawia rozmiar kopca na s
    int getValue(int i);                //zwraca wartość z pozycji i
    void setValue(int i, int x);        //ustawia wartość x na pozycji i
    void bottomUp(int i);                //przywraca własność kopca metodą wynurzania
    void topDown(int i);                //przywraca własność kopca metodą zatapiania
    friend std::ostream& operator<<(std::ostream& out, MinHeap& h);

    //Zadanie 2
    void insert(int x);                    //wstawia element z priorytetem x
    int deleteMin();                     //usuwa element z minimalną wartością
    int minimum();                        //zwraca minimalną wartość
    void del(int i);                         //usuwa element na pozycji i
    void decreaseKey(int i, int x);        //zmniejsza wartość na pozycji i, ustawia x    
};


int main()
{
    MinHeap h;
    cout << endl << "empty(): 0 - " << h.empty();

    cout << endl << "full(): 0 - " << h.full();

    cout << endl<< h;
    cout << endl << "setValue(2,6) "; h.setValue(2, 6);
    cout << endl << h;
    h.topDown(2);
    cout << endl << "Wlasnosc kopca przywrocona: ";
    cout << endl << h;
    //przywrocenie poczatkowego kopca
    h.setValue(5, 4);

    cout << endl << "setValue(2,6) "; h.setValue(2, 6);
    cout << endl << h;
    cout << endl << "BottomUp(5): "; h.bottomUp(5);
    cout << endl << h;
    cout << endl << "Insert(8) "; h.insert(8);
    cout << endl << h;
    cout << endl << "Insert(5) - 1 2 4 6 5 5 7 7 7 9 6 8 6 "; h.insert(5);
    cout << endl << h;
    cout << endl << "deleteMin() : 2 5 4 6 6 5 7 7 7 9 6 8 "; h.deleteMin();
    cout << endl << h;
    cout << endl << "Minimum() 2 - " << h.minimum();
    cout << endl << "deleteMin() : 4 5 5 6 6 8 7 7 7 9 6 "; h.deleteMin();
    cout << endl << h;
    cout << endl << "del(9) - "; h.del(9);
    cout << endl << h;
    cout << endl << "del(9) - "; h.del(9);
    cout << endl << h;
    cout << endl << "Decrease Key(6, 4) - 4 5 4 6 6 8 5 7 7"; h.decreaseKey(6, 4);
    cout << endl << h;



	return 0;
}

//Zadanie 1

MinHeap::MinHeap(int c)
{
    kopiec = new int[c];
    capacity = c;
    size = 0;
}

MinHeap::MinHeap()
{
    kopiec = new int[15];
    kopiec[0] = 1; kopiec[1] = 2; kopiec[2] = 4; kopiec[3] = 6; kopiec[4] = 5; kopiec[5] = 4; kopiec[6] = 7; kopiec[7] = 7; kopiec[8] = 7; kopiec[9] = 9; kopiec[10] = 6; //11 elementow
    capacity = 15;
    size = 11;
}

bool MinHeap::empty()
{
    if (size == 0)
        return true;
    else return false;
}

bool MinHeap::full()
{
    if (size == capacity)
        return true;
    else return false;
}

int MinHeap::getLeft(int i)
{
    if (empty())
        return -1;

    if ((2 * i + 1) < size)
        return 2 * i + 1;
    else return -1;
}

int MinHeap::getRight(int i)
{
    if (empty())
        return -1;

    if ((2 * i + 2) < size)
        return 2 * i + 2;
    else return -1;
}

int MinHeap::getParent(int i)
{
    if (i == 0)
        return -1;
    else return (i - 1) / 2;
}

int MinHeap::getSize()
{
    return size;
}

void MinHeap::setSize(int s)
{
    size = s;
}

int MinHeap::getValue(int i)
{
    if (empty())
        return NULL;
    else return kopiec[i];
}

void MinHeap::setValue(int i, int x)
{
    kopiec[i] = x;
}

std::ostream& operator<<(std::ostream& out, MinHeap& h)
{
    out << "[ ";
    for (int i = 0; i < h.getSize(); i++)
    {
        out << h.getValue(i) << " ";
    }
    out << "]";
    return out;
}

void MinHeap::topDown(int i)
{
    int l = getLeft(i);
    int r = getRight(i);
    if ( l<0 || r<0)
        return;
    int g = i;
    if (l < getSize() && getValue(l) < getValue(i))
        g = l;
    if (r < getSize() && getValue(r) < getValue(g))
        g = r;
    if (g != i)
    {
        int temp = getValue(i);
        setValue(i, getValue(g));
        setValue(g, temp);
        topDown(g);
    }
}

void MinHeap::bottomUp(int i)
{
    if (i > 0)
    {
        int p = getParent(i);
        if (getValue(i) < getValue(p))
        {
            swap(kopiec[i], kopiec[p]);
            bottomUp(p);
        }
    }
}

void MinHeap::insert(int x)
{
    //kopiec pelny
    if (full())
        return;

    kopiec[size] = x;
    size++;
    bottomUp(size-1);
}

int MinHeap::deleteMin()
{
    if (empty())
        return NULL;

    size -= 1;
    swap(kopiec[0], kopiec[size]);
    topDown(0);
}

int MinHeap::minimum()
{
    if (empty())
        return NULL;
    else return kopiec[0];
}

void MinHeap::del(int i)
{
    if (empty())
        return;
    size -= 1;
    swap(kopiec[i], kopiec[size]);
    topDown(i);
    bottomUp(i);
}

void MinHeap::decreaseKey(int i, int x)
{
    if (i > size - 1 || empty())
        return;

    kopiec[i] = x;
    topDown(i);
    bottomUp(i);
}
