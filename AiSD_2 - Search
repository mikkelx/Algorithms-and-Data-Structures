#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

//Zadanie 1
void print(int* S, int n) {              //wyświetla dane na monitorze
	cout << "\nDane w tablicy: ";
	for (int i = 0; i < n; i++)
	{
		cout << S[i] << " ";
	}
	cout << endl;
}

int linearSearch1(int* S, int n, int x) {

	for (int i = 0; i < n; i++)
	{
		if (x == S[i])
			return i;
	}
	return -1;
}

//Zadanie 2

int binarySearch1(int* S, int n, int x) { 
	int l = 0, p = n - 1;
	while (l <= p) {
		int sr = (l + p) / 2;
		if (S[sr] == x)
			return sr;
		if (x < S[sr])
			p = sr - 1;
		else 
			l = sr + 1;
	}
	return -1;
}

//Zadanie 3

int linearSearch2(int* S, int n, int x) {
	int licznik = 0;
	for (int i = 0; i < n; i++)
	{
		licznik++;
		if (x == S[i])
			return licznik;
	}
	return licznik;
}

int binarySearch2(int* S, int n, int x) {
	int l = 0, p = n - 1;
	int licznik = 0;
	while (l <= p) {
		licznik++;
		int sr = (l + p) / 2;
		if (S[sr] == x)
			return licznik;
		if (x < S[sr])
			p = sr - 1;
		else
			l = sr + 1;
	}
	return licznik;
}

//Zadanie 4
void init(int* S, int n) {              //inicjalizuje tablicę S losowymi liczbami
	for (int i = 0; i < n; i++)
	{
		S[i] = rand() % 100;
	}
}

void initSorted(int* S, int n) {              //inicjalizuje tablicę S losowymi liczba posortowanymi niemalejąco
	for (int i = 0; i < n; i++)
	{
		S[i] = rand() % 100;
	}

	for (int i = 0; i < n; i++)  //sortowanie
	{
		for (int j = 0; j < n - 1; j++)
		{
			if (S[j] > S[j + 1])
				swap(S[j], S[j + 1]);
		}
	}

}

//Zadanie 5

int interpolationSearch1(int* S, int n, int x) { //wersja iteracyjna
	//ip - indeks poczatku, ik - indeks konca, is- indeks srodka
	int ip = 0, ik = n - 1, is = 0;

	//typowanie spodziewanej pozycji szukanego elementu
	while ((S[ip] <= x) && (x <= S[ik]))
	{
		is = ip + (x - S[ip]) * (ik - ip) / (S[ik] - S[ip]);
		if (S[is] == x)
			return is;
		if (S[is] < x)
			ip = is + 1;
		else
			ik = is - 1;
	}
	return -1;
}

int interpolationSearch2(int* S, int n, int x) { //wersja iteracyjna
	//ip - indeks poczatku, ik - indeks konca, is- indeks srodka
	int ip = 0, ik = n - 1, is = 0;
	int counter = 0;
	//typowanie spodziewanej pozycji szukanego elementu
	while ((S[ip] <= x) && (x <= S[ik]))
	{
		counter++;
		is = ip + (x - S[ip])*(ik - ip) / (S[ik] - S[ip]);
		if (S[is] == x)
			return counter;
		if (S[is] < x)
			ip = is + 1;
		else
			ik = is - 1;
	}
	return -1;
}


int main() 
{
	srand(time(NULL));


	//Zadanie 6 – test
	cout << endl << "Zadanie 6 – test" << endl;

	for (int i = 100; i < 1000; i+=100) {
		int n = i;
		int* S = new int[n];
		initSorted(S, n);
		print(S, n);
		int x = 6;
		//wczytanie/ustawienie x dla przypadku 1
		cout << endl << "Liczba powtorzen Binary " << binarySearch2(S, n, x);  //x na pozycji .....
		cout << endl << "Liczba powtorzen Linear " << linearSearch2(S, n, x);  //x na pozycji 0
		cout << endl << "Liczba powtorzen Interpolar " << interpolationSearch2(S, n, x);
	}

	////Zadanie 2 test
	//int n = 20;        //przykładowy rozmiar
	//int* S = new int[n] {0, 1, 3, 4, 5, 5, 6, 7, 8, 10, 20, 20, 40, 50, 60, 70, 80, 90, 90, 100};
	//int x;
	//cin >> x;
	//print(S, n);
	////wczytanie/ustawienie x dla przypadku 1
	//cout << endl << "Przypadek 1: x znalezione w pierwszym kroku (pozycja ...) " << binarySearch1(S, n, x);  //x na pozycji .....
	////...

	//Zadanie 1 - test
	//cout << "Zadanie 1 - test" << endl;

	//int n = 20;        //przykładowy rozmiar
	//int* S = new int[n] {0, 1, 3, 4, 5, 5, 6, 7, 8, 10, 20, 20, 40, 50, 60, 70, 80, 90, 90, 100 };
	//int x;
	//cin >> x;
	//print(S, n);
	//cout << endl << "Przypadek 1: x na pozycji - " << linearSearch1(S, n, x);  //x na pozycji 0
	////...
}

//przykładowy rozmiar
//int* S = new int[n] {0, 1, 3, 4, 5, 5, 6, 7, 8, 10, 20, 20, 40, 50, 60, 70, 80, 90, 90, 100};
