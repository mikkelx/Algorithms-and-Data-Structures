#include <iostream>
#include <string>


using namespace std;

//Zadanie 1
int naiveStringMatching(string T, string p);

//Zadanie 2
int BoyerMoore(string T, string p);

int main()
{
	//Zadanie 1 - testy

	string text = "kolorowe";
	string pattern = "we";

	//wywołanie naiveStringMatching() i wyświetlenie wyników (wszystkich pozycji, od których został znaleziony wzorzec i liczby powtórzeń operacji dominującej)
	cout << "Tekst: " << text << endl;
	cout << "Patern: " << pattern << endl;
	cout << "Ilosc wystapien operacji dominujacej w calej funkcji: " << naiveStringMatching(text, pattern) << endl;
	cout << endl << "BayerMoore\n";
	BoyerMoore(text, pattern);

	return 0;
}

int BoyerMoore(string T, string p)
{
	int m = T.length();
	int n = p.length();

	//utworzenie tablicy bad character z wpisaniem -1 na kazdy indeks
	int bc[256];
	memset(bc, -1, 256*sizeof(int));
	
	for (int i = 0; i < n; i++) //zrzutowanie znaku na ascii i wpisanie jego indeksuw patternie do tablicy bc
	{
		bc[(int)(p[i])] = i;
	}

	int s = 0;
	while(s < m - n)
	{
		int i = n - 1;
		while(i >= 0 && p[i] == T[s + i])
		{
			i--;
		}
		if (i == -1)
			cout << "Wzorzec wystapil z przesunieciem s " << s++;
		else
		{
			if (bc[T[s + 1]] == -1)
				s = s + i + 1;
			else if (bc[T[s + i]] < i)
				s = s + i - bc[T[s + 1]];
			else
				s = s+1;
		}
	}


	return 0;
}

int naiveStringMatching(string T, string p)
{
	int m = T.length();
	int n = p.length();

	int counter = 0;

	for (int k = 0; k <= m - n; k++)
	{
		int i = 0;
		counter++;

		while (i < n && p[i] == T[k + i]) 
		{
			counter++;
			i++;
		}

		if (i == n)  //jesli iterator rowny dlugosci patternu to znaleziony
		{
			cout << "Worzec " << p << " wystapil zaczynajac sie na indeksie : " << k << endl;
		}
	}
	return counter;
}
