#include <iostream>

using namespace std;

//Zadanie 1

class ArrayStack {
private:
    int* items;
    int capacity;        //pojemność stosu
    int top;                //wierzchołek stosu
public:
    ArrayStack(int c);    //tworzy pusty stos o pojemności c
    bool empty();
    bool full();
    bool push(int x);
    int peek();            //zwraca daną ze stosu
    bool pop();            //usuwa daną ze stosu
    void clear();
    friend std::ostream& operator<<(std::ostream& out, ArrayStack& s); //wyświetla całą zawartość stosu    
    ~ArrayStack();
};

//Zadanie 2
class Element {
private:
    int v;
    Element* next;
public:
    Element(int x, Element* next);
    int getValue();
    Element* getNext();
    void setNext(Element* p);
};

class LinkedStack {
private:
    Element* top;
public:
    LinkedStack();        //tworzy pusty stos
    bool empty();
    bool push(int x);
    int peek();            //zwraca daną ze stosu
    bool pop();            //usuwa element ze stosu
    void clear();
    friend std::ostream& operator<<(std::ostream& out, LinkedStack* s); //wyświetla zawartość całego stosu
    ~LinkedStack();
};

//Zadanie 3
class ArrayFifo {
private:
    int* items;
    int capacity;            //pojemność kolejki
    int size;                //rozmiar kolejki (liczba elementów w kolejce)
    int head;
    int tail;
public:
    ArrayFifo(int c);        //tworzy pustą kolejkę o pojemności c
    bool empty();
    bool full();
    bool enqueue(int x);
    int peek();
    bool dequeue();        //usuwa daną z kolejki
    void clear();
    friend std::ostream& operator<<(std::ostream& out, ArrayFifo& f);    //wyświetla zawartość kolejki (od head do tail)
    ~ArrayFifo();
};

//Zadanie 4
class LinkedFifo {
private:
    Element* head;
    Element* tail;
public:
    LinkedFifo();
    bool empty();
    bool enqueue(int x);
    int peek();                //zwraca daną z kolejki
    bool dequeue();            //usuwa daną z kolejki
    void clear();
    friend std::ostream& operator<<(std::ostream& out, LinkedFifo* f);    //wyświetla zawartość kolejki (od head do tail)
    //~LinkedFifo();
};


int main()
{
    //Zadanie 1 - test
    ArrayStack s(6);
    cout << endl << "empty(): 1 - " << s.empty();
    cout << endl << "push(4): 4 - "; s.push(4);  cout << " " << s;
    cout << endl << "push(3): 4 3 - "; s.push(3);  cout << " " << s;
    cout << endl << "push(1): 4 3 1 - "; s.push(1);  cout << " " << s;
    cout << endl << "pop(): 4 3 - "; s.pop(); cout << " " << s;
    cout << endl << "push(6): 4 3 6 - "; s.push(6);  cout << " " << s;
    cout << endl << "push(7): 4 3 6 7 - "; s.push(7);  cout << " " << s;
    cout << endl << "empty(): 0 - " << s.empty();
    cout << endl << "peek(): 7 - " << s.peek();
    cout << endl << "push(8): 4 3 6 7 8 - "; s.push(8);  cout << " " << s;
    cout << endl << "push(9): 4 3 6 7 8 9 - "; s.push(9);  cout << " " << s;
    cout << endl << "push(10): 4 3 6 7 8 9 - "; s.push(10);  cout << " " << s;
    cout << endl << "full(): 1 - " << s.full();
    cout << endl << "clear(): [ ] - "; s.clear(); cout << " " << s;

    //Zadanie 2 test
    cout << endl << "Zadanie 2: " << endl;
    LinkedStack* l = new LinkedStack();
    cout << endl << "empty(): 1 - " << l->empty();
    cout << endl << "push(5): 5 - "; l->push(5); cout << " " << l;
    cout << endl << "push(4): 4 5 - "; l->push(4); cout << " " << l;
    cout << endl << "push(3): 3 4 5 - "; l->push(3); cout << " " << l;
    cout << endl << "push(6): 6 3 4 5 - "; l->push(6); cout << " " << l;
    cout << endl << "pop(): 3 4 5 - "; l->pop(); cout << " " << l;
    cout << endl << "peek(): 3 - " << l->peek();
    cout << endl << "clear() [] - "; l->clear(); cout << " " << l;

    //Zadanie 3 test
    cout << endl << "Zadanie 3: " << endl;
    ArrayFifo f(6);
    cout << endl << "empty(): 1 - " << f.empty();
    cout << endl << "enqueue(4): 4 - "; f.enqueue(4); cout << " " << f;
    cout << endl << "enqueue(5): 4 5 - "; f.enqueue(5); cout << " " << f;
    cout << endl << "enqueue(6): 4 5 6 - "; f.enqueue(6); cout << " " << f;
    cout << endl << "enqueue(7): 4 5 6 7 - "; f.enqueue(7); cout << " " << f;
    cout << endl << "enqueue(8): 4 5 6 7 8 - "; f.enqueue(8); cout << " " << f;
    cout << endl << "enqueue(9): 4 5 6 7 8 9 - "; f.enqueue(9); cout << " " << f;
    cout << endl << "dequeue(): - 5 6 7 8 9 - "; f.dequeue(); cout << " " << f;
    cout << endl << "enqueue(1): 1 5 6 7 8 9 - "; f.enqueue(1); cout << " " << f;
    cout << endl << "dequeue(): 1 - 6 7 8 9 - "; f.dequeue(); cout << " " << f;
    cout << endl << "dequeue(): 1 - - 7 8 9 - "; f.dequeue(); cout << " " << f;
    cout << endl << "peek() 7 -  " << f.peek();
    cout << endl << "clear() [] - "; f.clear(); cout << " " << f;

    //Zadanie 4 test
    cout << endl << "Zadanie 4: " << endl;
    //LinkedFifo* f = new LinkedFifo();


    return 0;
}

ArrayStack::ArrayStack(int c) {
    items = new int[c];
    capacity = c;
    top = -1;
}

bool ArrayStack::empty() {
    if (top == -1)
        return true;
    else return false;
}

bool ArrayStack::full() {
    if (top == (capacity - 1))
        return true;
    else return false;
}

bool ArrayStack::push(int x) {
    if (this->full())
        return false;
    top++;
    items[top] = x;
    return true;
}

int ArrayStack::peek() {
    if (this->empty())
        return -1;

    return items[top];
}

bool ArrayStack::pop() {
    if (this->empty())
        return false;
    top--;
    return true;
}

void ArrayStack::clear() {
    for (int i = 0; i < top; i++)
    {
        items[i] = NULL;
    }
    top = -1;
}

std::ostream& operator<<(std::ostream& out, ArrayStack& s)//wyświetla całą zawartość stosu
{
    out << "[ ";
    if (!s.empty())
    {
        for (int i = 0; i <= s.top; i++)
        {
            out << s.items[i] << " ";
        }
    }
    out << "]";

    return out;
}

ArrayStack::~ArrayStack() {
    delete items;
}


//Zadanie 2

Element::Element(int x, Element* next) :v(x), next(next) {};

int Element::getValue() {
    return v;
}

Element* Element::getNext() {
    return next;
}

void Element::setNext(Element* p) {
    this->next = p;
}

LinkedStack::LinkedStack() {
    top = nullptr;
}

bool LinkedStack::empty() {
    if (top == nullptr)
        return true;
    else return false;
}

bool LinkedStack::push(int x) {
    Element* newone = new Element(x, top);
    top = newone;
    return true;
}

int LinkedStack::peek() {
    if (this->empty())
        return NULL;
    return top->getValue();
}

bool LinkedStack::pop() {
    if (!empty())
    {
        Element* temp = top;
        top = top->getNext();
        delete temp;
        return true;
    }
    else return false;
}

void LinkedStack::clear() {
    if (this->empty())
        return;
    Element* nextOne = top->getNext();
    while (nextOne != nullptr)
    {
        delete top;
        top = nextOne;
        nextOne = nextOne->getNext();
    }
    delete top;
    top = nullptr;
}

std::ostream& operator<<(std::ostream& out, LinkedStack* s) {
    out << "[ ";
    Element* temp = s->top;
    if (!s->empty())
    {
        while (temp != nullptr)
        {
            out << temp->getValue() << " ";
            temp = temp->getNext();
        }
    }
    out << "]";
    return out;
}

LinkedStack::~LinkedStack() {
    this->clear();
}


//Zadanie 3

ArrayFifo::ArrayFifo(int c) {
    items = new int[c];
    capacity = c;
    size = 0;
    head = -1;
    tail = -1;
}

bool ArrayFifo::empty() {
    if (size == 0)
        return true;
    else return false;
}

bool ArrayFifo::full() {
    if (size == capacity)
        return true;
    else return false;
}

bool ArrayFifo::enqueue(int x) {
    if (this->full())
        return false;
    if (head == -1)
    {
        items[0] = x;
        head = 0;
        tail = 0;
        size++;
    }
    else if (tail < capacity - 1)
    {
        tail++;
        items[tail] = x;
        size++;
    }
    else if (tail == capacity - 1)
    {
        tail = 0;
        items[tail] = x;
        size++;
    }
    return true;

}

bool ArrayFifo::dequeue() {
    if (this->empty())
        return false;
    if (head < capacity - 1)
    {
        head++;
    }
    else if (head == capacity - 1)
    {
        head = 0;
    }
    else if (tail == head)
    {
        head = -1;
        tail = -1;
    }
    size--;
    return true;
}

std::ostream& operator<<(std::ostream& out, ArrayFifo& f) {
    out << "[ ";
    if (!f.empty())
    {
        if (f.head <= f.tail)
        {
            if (f.head > 0)
            {
                for (int i = 0; i < f.head; i++)
                    out << "- ";
            }
            
            for (int i = f.head; i <= f.tail; i++)
                out << f.items[i] << " ";
        }
        else
        {
            for(int i=0; i<=f.tail; i++)
                out << f.items[i] << " ";
            for (int i = f.tail + 1; i < f.head; i++)
                out << "- ";
            for (int i = f.head; i <= f.capacity - 1; i++)
                out << f.items[i] << " ";
        }

    }
    out << "]";
    return out;
}

int ArrayFifo::peek() {
    if (this->empty())
        return NULL;
    else return items[head];
}

void ArrayFifo::clear() {
    for (int i = 0; i < capacity; i++)
        items[i] = NULL;
    head = -1;
    tail = -1;
    size = 0;
}

ArrayFifo::~ArrayFifo() {
    delete items;
}

//Zadanie 4
LinkedFifo::LinkedFifo() {
    head = tail = nullptr;
}

bool LinkedFifo::empty() {
    if (head == nullptr)
        return true;
    else return false;
}

bool LinkedFifo::enqueue(int x) {
    //dodawanie elementu do pustej listy
    if (this->empty())
    {
        Element* newone = new Element(x, nullptr);
        head = tail = newone;
    }
    else {
        Element* newone = new Element(x, tail);
        tail = newone;
    }
    return true;
}

int LinkedFifo::peek() {
    if (this->empty())
        return NULL;
    else return this->head->getValue();
}

bool LinkedFifo::dequeue() {
    if (this->empty())
        return false;
    else if(head == tail)
    {
        delete head;
        head = tail = nullptr;
    }
}
