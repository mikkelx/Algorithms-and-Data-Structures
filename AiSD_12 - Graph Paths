#include <iostream>
#include <stack>

using namespace std;

struct edge {            //pomocnicza struktura danych do przechowywania listy kraw�dzi (i ich wag)
    int s;              //w�ze� pocz�tkowy kraw�dzi (s,t)
    int t;              //w�ze� ko�cowy kraw�dzi (s,t)
    double w;            //waga kraw�dzi (s,t)
};

class Graph {
private:
    double** adjMatrix;
    int n;                       //liczba w�z��w
    bool directed;                //true je�li graf jest skierowany
    bool weighted;                //true je�li jest to graf wa�ony
public:
    Graph(int n, int m, edge edges[], bool directed, bool weighted);    //tworzy graf na podstawie listy kraw�dzi
    friend ostream& operator<<(ostream& out, Graph& g);        //wy�wietla graf w postaci "listy s�siedztwa" (z wagami dla graf�w wa�onych)
    ~Graph();
    void shortestPath(int s, int t, int* parent);
    void Dijkstra(int s);
    void Warshall_Floyd();
};

int main()
{
    //Zadanie 1 - testy
    int n = 10;
    int m = 19;
    edge weightedDirectedGraph[] = { {0,1,5}, {1,2,2}, {1,7,3}, {2,3,7}, {2,8,6}, {3,2,7}, {5,3,2}, {3,9,5}, {4,0,2}, {6,0,5}, {6,7,5}, {7,6,5}, {7,4,1},
         {7,1,3}, {7,8,1}, {8,7,1}, {5,8,5}, {8,5,5}, {9,8,4} };
    Graph g(n, m, weightedDirectedGraph, true, true);
    cout << g;
    //testy metody Dijkstra() dla wybranych w�z��w �r�d�owych
    cout << "g.Dijkstra(0)" << endl;
    g.Dijkstra(0);
    cout << "g.Dijkstra(5)" << endl;
    g.Dijkstra(5);
    cout << "g.Dijkstra(9)" << endl;
    g.Dijkstra(9);
    g.Warshall_Floyd();
	return 0;
}


Graph::Graph(int n, int m, edge edges[], bool directed, bool weighted)
{
    this->n = n;
    this->directed = directed;
    this->weighted = weighted;
    adjMatrix = new double* [n];
    for (int i = 0; i < n; i++)
    {
        adjMatrix[i] = new double[n];
    }
    if (weighted)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                adjMatrix[i][j] = INFINITY;
                if (i == j)
                    adjMatrix[i][j] = 0.0;
            }
        }
    }
    else
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                adjMatrix[i][j] = 0.0;
            }
        }
    }
    if (directed)
    {
        for (int i = 0; i < m; i++)
        {
            adjMatrix[edges[i].s][edges[i].t] = edges[i].w;
        }
    }
    else
    {
        for (int i = 0; i < m; i++)
        {
            adjMatrix[edges[i].s][edges[i].t] = edges[i].w;
            adjMatrix[edges[i].t][edges[i].s] = edges[i].w;
        }

    }
}

Graph::~Graph()
{
    for (int i = 0; i < n; i++)
    {
        delete adjMatrix[i];
    }
}

void Graph::shortestPath(int s, int t, int* parent)
{
    stack<int> path;
    int current = t;
    while (current != s)
    {
        if (parent[current] == -1)
        {
            cout << endl << "Nie ma sciezki!" << endl;
            return;
        }
        path.push(parent[current]);
        current = parent[current];
    }
    while (!path.empty())
    {
        cout << path.top() << " -> ";
        path.pop();
    }
    cout << t << endl;
}

void Graph::Dijkstra(int s)
{
    if (s >= n)
        return;
    double* d = new double[n];
    bool* S = new bool[n];
    int* parent = new int[n];
    for (int i = 0; i < n; i++)
    {
        d[i] = INFINITY;
        S[i] = false;
        parent[i] = -1;
    }
    d[s] = 0.0;
    for (int j = 0; j < n; j++)
    {
        int current = -1;
        for (int i = 0; i < n; i++)
        {
            if (!S[i])
            {
                if (current == -1)
                    current = i;
                else
                {
                    if (d[i] < d[current])
                        current = i;
                }
            }
        }
        S[current] = true;
        for (int i = 0; i < n; i++)
        {
            if (adjMatrix[current][i] != INFINITY)
            {
                if (d[i] > d[current] + adjMatrix[current][i])
                {
                    d[i] = d[current] + adjMatrix[current][i];
                    parent[i] = current;
                }
            }
        }
    }
    for (int i = 0; i < n; i++)
    {
        if (i != s)
        {
            cout << "Droga z " << s << " do " << i << " wynosi: ";
            cout << d[i] << " (przez wezel " << parent[i] << ")" << endl;
        }
    }
    cout << "Najkrotsze sciezki: " << endl;
    for (int i = 0; i < n; i++)
    {
        if (i != s)
        {
            shortestPath(s, i, parent);
        }
    }
}

void Graph::Warshall_Floyd()
{
    double** d = new double*[n];
    for (int i = 0; i < n; i++)
    {
        d[i] = new double[n];
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            d[i][j] = adjMatrix[i][j];
        }
    }
    for (int k = 0; k < n; k++)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                if (d[i][j] > d[i][k] + d[k][j])
                    d[i][j] = d[i][k] + d[k][j];
            }
        }
    }
    cout << "| ";
    for (int i = 0; i < n; i++)
    {
        cout << i << " ";
    }
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << "| ";
        for (int j = 0; j < n; j++)
        {
            cout << d[i][j] << " ";
        }
        cout << endl;
    }
}

ostream& operator<<(ostream& out, Graph& g)
{
    for (int i = 0; i < g.n; i++)
    {
        out << i << ": ";
        for (int j = 0; j < g.n; j++)
        {
            if (g.adjMatrix[i][j] != 0.0 && g.adjMatrix[i][j] != INFINITY)
            {

                out << j;
                if (g.weighted)
                {
                    out << "(" << g.adjMatrix[i][j] << ")";
                }
                out << " ";
            }
        }
        out << endl;
    }
    return out;
}
