#include <iostream>

using namespace std;

//Zadanie 1
class ArrayList {
private:
    int* items;
    int head;                    //pozycja pierwszego elementu
    int tail;                    //pozycja ostatniego elementu
    int capacity;                 //rozmiar tablicy
    int size;                    //długość listy (liczba elementów w liście)

public:
    ArrayList(int c);            //tworzy pustą pistę o pojemności c
    bool empty();                //zwraca prawdę jeśli lista pusta, fałsz w przeciwnym przypadku
    bool full();                //zwraca prawdę jeśli lista jest pełna, fałsz w przeciwnym przypadku
    int getSize();                //zwraca wielkość listy (liczbę elementów w liście)
    int getCapacity();            //zwraca pojemnośc listy (rozmiar tablicy)
    int getFirst();              //zwraca pozycję pierwszego elementu
    int getLast();               //zwraca pozycję ostatniego elementu
    int getNext(int p);            //zwraca pozycję elementu następnego za p
    int getPrev(int p);            //zwraca pozycję elementu poprzedzającego p
    int retrieve(int p);         //zwraca element (wartość) z pozycji p
    void append(int x);            //wstawia element x na końcu listy
    void preppend(int x);            //wstawia element x na początku listy
    bool insert(int p, int x);     //wstawia element x na pozycję p, zwraca false jeśli p nie jest legalną pozycją
    bool del(int p);              //usuwa element z pozycji p, zwraca false jeśli p nie jest legalną pozycją       
    void clear();                //usuwa całą zawartość listy
    friend ostream& operator<<(ostream& out, ArrayList& l); //wypisuje elementu listy   
    ~ArrayList();


    //Zadanie 2
    int locate(int x);          //zwrac pozycję pierwszego wystąpienia elementu x, -1 jeśli x nie występuje
    bool deleteX(int x);              //usuwa pierwsze wystąpienie elementu o wartości x i zwraca true jeśli element istniał, false jeśli nie
    int deleteAllX(int x);            //usuwa wszystkie wystąpienia elementu o wartości x i zwraca ich liczbę
    bool concat(ArrayList& l);        // na końcu bieżącej listy dołącza zawartość listy l, zwraca false jeśli dołączenie nie jest możliwe
};

//Zadanie 3

class SortedArrayList :public ArrayList {
public:
    void insertSorted(int x);                //wstawia element x z zachowaniem porządku niemalejącego
    SortedArrayList(int c) :ArrayList(c) {};
};


int main()
{
    //Zadanie 1 - test
    cout << endl << "Zadanie 1 oraz 2 - test" << endl;
    //przykładowy sposób testowania
   //cout << endl << " " << ;
    ArrayList a(5);
    ArrayList b(8);
    cout << endl << "a empty() 1 - " << a.empty();
    cout << endl << "a full(): 0 - " << a.full();
    cout << endl << "a getSize(): 0 - " << a.getSize();
    cout << endl << "a append(4): 4 - ";
    a.append(4); cout << " " << a;
    cout << endl << "a get capacity 5 - " << a.getCapacity();
    cout << endl << "b get capacity 8 - " << a.getCapacity();
    cout << endl << "a append(3,2,1): 4,3,2,1 - "; a.append(3); a.append(2); a.append(1); cout << " " << a;
    cout << endl << "a getFirst 0 - " << a.getFirst();
    cout << endl << "a getLast 3 -  " << a.getLast();
    cout << endl << "a getNext 2 " << a.getNext(1);
    cout << endl << "a getPrev 0 " << a.getPrev(1);
    cout << endl << "a getNext -1 " << a.getNext(4);
    cout << endl << "a del(2) 4, 3, 1 -  " << a.del(2);
    cout << " " << a;
    cout << endl << "a prepend(5) - 5,4,3,1 - "; a.preppend(5); cout << " " << a;
    cout << endl << "a insert(2, 6) 5,4,6,3,1 - " << a.insert(2, 6); cout << " " << a;
    cout << endl << "a retrieve(2) 6 - " << a.retrieve(2);
    cout << endl << "b append 9,8,7 - "; b.append(9); b.append(8); b.append(7);
    cout << " " << b;
    cout << endl << "b size 3 - " << b.getSize();
    cout << endl << "b.concat(a) 9,8,7,5,4,6,3,1 - " << b.concat(a);
    cout << " " << b;
    cout << endl << "b locate(1) 7 - " << b.locate(1);
    cout << endl << "b deleteX(1) 1 - " << b.deleteX(1);
    cout << " " << b;
    cout << endl << "b append 9 - "; b.append(9); cout << " " << b;
    cout << endl << "b deleteAllX(9) 8,7,5,4,6,3 - " << b.deleteAllX(9);
    cout << " " << b;
    cout << endl << "b clear - "; b.clear(); cout << " " << b;
    cout << endl << endl;



    SortedArrayList s(5);
    cout << endl << "insertSorted 4 - ";
    s.insertSorted(4);
    cout << " " << s;
    cout << endl << "insertSorted 3,2,10,4 - ";
    s.insertSorted(3);
    s.insertSorted(2);
    s.insertSorted(10);
    s.insertSorted(4);
    cout << " " << s;

    return 0;
}

ArrayList::ArrayList(int c) {
    capacity = c;
    items = new int[capacity];
    head = -1;
    tail = -1;
    size = 0;
}


bool ArrayList::empty() {
    if (size == 0)
        return true;
    else return false;
}

bool ArrayList::full() {
    if (size == capacity)
        return true;
    else return false;
}

int ArrayList::getSize() {
    return size;
}

int ArrayList::getCapacity() {
    return capacity;
}

int ArrayList::getFirst() {
    return head;
}

int ArrayList::getLast() {
    return tail;
}

int ArrayList::getNext(int p) {
    if (p < tail && p >= head)
        return p + 1;
    else
    {
        cout << " Wykroczenie poza zakres!\n";
        return -1;
    }
}

int ArrayList::getPrev(int p) {
    if (p > head && p <= tail)
        return p - 1;
    else
    {
        cout << " Wykroczenie poza zakres!\n";
        return -1;
    }
}

int ArrayList::retrieve(int p) {
    if (p <= tail && p >= head)
        return items[p];
    else return -1;
}

void ArrayList::append(int x) {
    if (tail == -1)
    {
        items[0] = x;
        head = 0;
        tail = 0;
        size++;
        return;
    }
    if (tail < capacity - 1)
    {
        tail++;
        items[tail] = x;
        size++;
    }
}

void ArrayList::preppend(int x) {
    if (!this->full())
    {
        for (int i = tail; i >= head; i--)
        {
            items[i + 1] = items[i];
        }
        tail++;
        items[head] = x;
        size++;
    }

}

bool ArrayList::insert(int p, int x) {
    if (!this->full())
    {
        for (int i = tail; i >= p; i--)
        {
            items[i + 1] = items[i];
        }
        tail++;
        size++;
        items[p] = x;
        return true;
    }
    else return false;
}

bool ArrayList::del(int p) {
    if (p >= head && p <= tail)
    {
        for (int i = p; i <= tail; i++)
        {
            items[i] = items[i + 1];
        }
        tail--;
        size--;
        return true;
    }
    return false;
}

void ArrayList::clear() {
    tail = -1;
    head = -1;
    size = 0;
}

ostream& operator<<(ostream& out, ArrayList& l) {
    out << "[ ";
    if (l.size > 0)
    {
        for (int i = l.head; i <= l.tail; i++)
        {
            out << l.items[i] << " ";
        }
    }
    out << "]";
    return out;
}

ArrayList::~ArrayList() {
    delete[]items;
}

int ArrayList::locate(int x) {
    for (int i = head; i <= tail; i++)
    {
        if (items[i] == x)
            return i;
    }

    return -1;
}

bool ArrayList::deleteX(int x) {
    //wyszukiwanie pierwszej pozycji za pomoca wyszukiwania liniowego
    int firstPosition = -1;
    for (int i = head; i <= tail; i++)
    {
        if (items[i] == x) {
            firstPosition = i;
            break;
        }
    }

    //usuwanie elemntu z listy
    if (firstPosition == -1)
        return false;
    else
    {
        if (firstPosition == tail)
            tail--;
        else
        {
            for (int i = firstPosition; i <= tail; i++)
            {
                items[i] = items[i + 1];
            }
            tail--;
        }

        size--;
        return true;
    }

}

int ArrayList::deleteAllX(int x) {
    bool counter = 0;
    for (int i = head; i <= tail; i++)
    {
        if (items[i] == x)
        {
            counter++;
            for (int j = i; j <= tail; j++)
            {
                items[j] = items[j + 1];
            }
            tail--;
            size--;
        }
    }

    return counter;
}

bool ArrayList::concat(ArrayList& l)
{
    if ((capacity - size) >= l.size)
    {
        for (int i = l.head; i <= l.tail; i++)
        {
            items[tail + 1] = l.items[i];
            tail++;
            size++;
        }
        return true;
    }
    return false;
}


void SortedArrayList::insertSorted(int x) {
    int size = getSize();
    int condition = false;

    //brak miejsca na wstawienie liczby
    if (size == getCapacity())
        return;

    //znajdowanie pozycji do wstawienia liczby
    int p = 0;
    if (size > 0)
    {
        for (int i = 0; i < size; i++) {
            if (x <= retrieve(i))
            {
                condition = true;
                p = i;
                break;
            }
        }
    }
    //wstawiane na ostatnia pozycje
    if (!condition && size > 0)
        p = getLast() + 1;

    //wstawianie pierwszej liczby
    if (p == 0 && size == 0)
    {
        append(x);
        return;
    }
    //wstawianie na pierwsza pozycje
    if (p == 0)
        preppend(x);
    else
        insert(p, x);
}
